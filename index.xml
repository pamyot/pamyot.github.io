<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pour le plaisir du code</title>
    <link>http://pamyot.github.io/</link>
    <description>Recent content on Pour le plaisir du code</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2016 Pascal Amyot. All rights reserved.</copyright>
    <lastBuildDate>Tue, 22 Mar 2016 10:28:24 -0400</lastBuildDate>
    <atom:link href="http://pamyot.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>API-Step 2 - Starting the loopback implementation (part 1)</title>
      <link>http://pamyot.github.io/post/api-loopback-part-1/</link>
      <pubDate>Tue, 22 Mar 2016 10:28:24 -0400</pubDate>
      
      <guid>http://pamyot.github.io/post/api-loopback-part-1/</guid>
      <description>

&lt;p&gt;Now that my &lt;a href=&#34;http://pamyot.github.io/post/first-api-design_first/&#34;&gt;design&lt;/a&gt; as been done with the swagger format, I&amp;rsquo;ll start the coding with &lt;a href=&#34;http://loopback.io/&#34;&gt;LoopBack&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;apigee-127:4323dfd6c4695a5fc1481e909e479670&#34;&gt;Apigee-127&lt;/h2&gt;

&lt;p&gt;Before deciding to use loopback, my first attempt was with &lt;a href=&#34;https://github.com/apigee-127/a127-documentation/wiki/What-is-Apigee-127&#34;&gt;Apigee-127&lt;/a&gt;.  The framework
was easy to use until I realized that while the &lt;a href=&#34;http://microservices.io/patterns/apigateway.html&#34;&gt;API Gateway&lt;/a&gt; is written using
pure node.js code, the &lt;a href=&#34;https://github.com/apigee-127/a127-documentation/wiki/Quick-Start:-Download-and-Start-Usergrid&#34;&gt;favorite choice&lt;/a&gt; of implementation is
the &lt;a href=&#34;http://usergrid.apache.org/&#34;&gt;apache usergrid&lt;/a&gt; BaaS Framework.&lt;/p&gt;

&lt;p&gt;Since apache usergrid is writting in Java EE stack and not a pure node.js implementation I have to eliminate it.&lt;/p&gt;

&lt;h2 id=&#34;feathers-2-0:4323dfd6c4695a5fc1481e909e479670&#34;&gt;Feathers 2.0&lt;/h2&gt;

&lt;p&gt;After that, I tried the &lt;a href=&#34;https://www.gitbook.com/book/feathersjs/feathers-docs/details&#34;&gt;feathers 2.0&lt;/a&gt; framework.  Very
modular, the framework is writting using pure node.js code. After searching a little bit on the internet and
the slack channel for the framework, I didn&amp;rsquo;t find any hooks that can bridge the swagger 2.0 yaml format
to the service implementation.   The people working to build this framework were very kind in answering my questions.&lt;/p&gt;

&lt;p&gt;I found it difficult to find examples and to write a complete working API with it.  I&amp;rsquo;m not a node expert too so I stopped my
exploration for now but I promise to go back and give it a try later.&lt;/p&gt;

&lt;h2 id=&#34;loopback:4323dfd6c4695a5fc1481e909e479670&#34;&gt;Loopback&lt;/h2&gt;

&lt;p&gt;The loopback framework is well documented and as a lot of examples available, easier to start with than Apigee-127 and
Feathers 2.0 so I started with this one (on my third try).&lt;/p&gt;

&lt;h3 id=&#34;creating-the-application:4323dfd6c4695a5fc1481e909e479670&#34;&gt;Creating the application&lt;/h3&gt;

&lt;p&gt;Creating the application was easy :&lt;/p&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;http://pamyot.github.io/img/api-loopback/api_create_app.png&#34; alt=&#34;&#34;&gt;


&lt;h3 id=&#34;generating-a-model-based-on-my-swagger-definition:4323dfd6c4695a5fc1481e909e479670&#34;&gt;Generating a model based on my swagger definition&lt;/h3&gt;

&lt;p&gt;The built-in &lt;a href=&#34;https://docs.strongloop.com/display/public/LB/Swagger+generator&#34;&gt;Swagger generator&lt;/a&gt; makes it easy to do the job.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve made a local copy of my swagger definition in the &lt;code&gt;api&lt;/code&gt; directory of my project with the name &lt;code&gt;words-swagger.yaml&lt;/code&gt; and generated the model :&lt;/p&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;http://pamyot.github.io/img/api-loopback/api-swagger-generator.png&#34; alt=&#34;&#34;&gt;


&lt;h3 id=&#34;running-the-project:4323dfd6c4695a5fc1481e909e479670&#34;&gt;Running the project&lt;/h3&gt;

&lt;p&gt;The included generator as a little bug in the version that I used :&lt;/p&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;http://pamyot.github.io/img/api-loopback/api-generator-error.png&#34; alt=&#34;&#34;&gt;


&lt;p&gt;The same bug appeared at a few places that I fixed easily.&lt;/p&gt;

&lt;h3 id=&#34;the-generated-api:4323dfd6c4695a5fc1481e909e479670&#34;&gt;The generated API&lt;/h3&gt;

&lt;p&gt;My swagger definition included a model and a list of API that I created to have some basics CRUD operations on my model. I
 didn&amp;rsquo;t realize when I used the &lt;code&gt;swagger-generator&lt;/code&gt; that it had the capacity to automatically generate the CRUD operations so I
 ended up with two sets of API.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;swagger_v1&lt;/strong&gt; API :&lt;/p&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;http://pamyot.github.io/img/api-loopback/api-swagger-v1.png&#34; alt=&#34;&#34;&gt;


&lt;p&gt;The &lt;strong&gt;WordList&lt;/strong&gt; API :&lt;/p&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;http://pamyot.github.io/img/api-loopback/api-wordlist.png&#34; alt=&#34;&#34;&gt;


&lt;h2 id=&#34;my-first-learning:4323dfd6c4695a5fc1481e909e479670&#34;&gt;My first learning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve learned an interesting feature about the loopback framework and the swagger format.  Since we have the ability to
define a model, there is not added value in defining the API for some basics CRUD operations.&lt;/p&gt;

&lt;p&gt;I will modify my swagger format to reflect that and continue on my API project.&lt;/p&gt;

&lt;h2 id=&#34;see-also:4323dfd6c4695a5fc1481e909e479670&#34;&gt;See also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pamyot.github.io/post/first-api-project/&#34;&gt;My first API projet&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pamyot.github.io/post/first-api-design_first/&#34;&gt;API-Step 1 Design first&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>API-Step 1 Design first</title>
      <link>http://pamyot.github.io/post/first-api-design_first/</link>
      <pubDate>Sat, 12 Mar 2016 07:23:45 -0400</pubDate>
      
      <guid>http://pamyot.github.io/post/first-api-design_first/</guid>
      <description>

&lt;p&gt;To build my first API, I will use a design first approach.&lt;/p&gt;

&lt;h2 id=&#34;why-design-first:05198e0a9765efc8697bcfdd80086b5f&#34;&gt;Why design first ?&lt;/h2&gt;

&lt;p&gt;My background as a software architect leads me naturally to opt for a design first approach.&lt;/p&gt;

&lt;p&gt;I googled a little bit to confirm that the design first approach still applies in an Agile and API world (we never know) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Excellent presentation from &lt;a href=&#34;http://www.infoq.com/presentations/api-design-first&#34;&gt;Jason Harmon&lt;/a&gt; or similar on &lt;a href=&#34;http://fr.slideshare.net/JasonHarmon1&#34;&gt;slideshare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://apievangelist.com/2014/08/11/what-is-an-api-first-strategy-adding-some-dimensions-to-this-new-question/&#34;&gt;API Evangelist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://apigee.com/about/blog/developer/design-first-approach-building-apis-swagger&#34;&gt;apigee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;use-case:05198e0a9765efc8697bcfdd80086b5f&#34;&gt;Use case&lt;/h2&gt;

&lt;p&gt;The use case that will be used for the first API will be based on a flash word learning technic that is used for &lt;a href=&#34;http://homeschoolingwithdyslexia.com/how-to-teach-sight-words-dyslexia/&#34;&gt;kids with dyslexia&lt;/a&gt;.
For the first API, I will only build an API that allows to do CRUD operation on a word list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create, Update or Delete a word list.&lt;/li&gt;
&lt;li&gt;Get a word list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know the operations are rather basic for now, but I want to start small and I&amp;rsquo;ll add more later.&lt;/p&gt;

&lt;h2 id=&#34;tools:05198e0a9765efc8697bcfdd80086b5f&#34;&gt;Tools&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll use the &lt;a href=&#34;http://swagger.io/&#34;&gt;Swagger&lt;/a&gt; format to design the API and store it on &lt;a href=&#34;https://swaggerhub.com&#34;&gt;Swagger Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;designing-the-api:05198e0a9765efc8697bcfdd80086b5f&#34;&gt;Designing the API&lt;/h2&gt;

&lt;p&gt;The swagger editor is nice but it doesn&amp;rsquo;t help in creating a valid YAML document.  To create my API, I add
to go to the &lt;a href=&#34;http://swagger.io/specification/&#34;&gt;OPENAPI SPECIFICATION&lt;/a&gt; reference page and I refered to
another example that a had written last year to test the swagger specification.&lt;/p&gt;

&lt;h3 id=&#34;designing-the-entities:05198e0a9765efc8697bcfdd80086b5f&#34;&gt;Designing the entities&lt;/h3&gt;

&lt;p&gt;I started by defining my entities required for my API.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/pamyot/6b4d3f6b17ec1647c416.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;reusable-parameters:05198e0a9765efc8697bcfdd80086b5f&#34;&gt;Reusable parameters&lt;/h3&gt;

&lt;p&gt;I have the wordListID parameter that is used in a few places so I created a parameter for that.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/pamyot/3091576d6c1f70b96b6a.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;create-the-required-verbs:05198e0a9765efc8697bcfdd80086b5f&#34;&gt;Create the required verbs&lt;/h3&gt;

&lt;p&gt;The final step was to create the verbs required to implement my API.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/pamyot/41fb243f2d16352848ef.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;the-api:05198e0a9765efc8697bcfdd80086b5f&#34;&gt;The API&lt;/h2&gt;

&lt;p&gt;You can explore the complete &lt;a href=&#34;https://swaggerhub.com/api/pamyot/words/V0.1&#34;&gt;Words API&lt;/a&gt; on swaggerHub.&lt;/p&gt;

&lt;h2 id=&#34;intuitive-and-easy:05198e0a9765efc8697bcfdd80086b5f&#34;&gt;Intuitive and easy&lt;/h2&gt;

&lt;p&gt;This first step was easy to do and I the swagger format helped me in designing a simple and clear API to be used.&lt;/p&gt;

&lt;h2 id=&#34;see-also:05198e0a9765efc8697bcfdd80086b5f&#34;&gt;See also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pamyot.github.io/post/first-api-project/&#34;&gt;My first API projet&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My first API project</title>
      <link>http://pamyot.github.io/post/first-api-project/</link>
      <pubDate>Mon, 07 Mar 2016 10:21:01 -0400</pubDate>
      
      <guid>http://pamyot.github.io/post/first-api-project/</guid>
      <description>

&lt;p&gt;The start of my exploration on API&amp;rsquo;s.&lt;/p&gt;

&lt;h2 id=&#34;why:77ce787a7182a2f283d6b9ebd897e1e5&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;The objective of the exercise is to better understand the different issues surrounding the implementation of modern solutions based on a deployable cloud API architecture.&lt;/p&gt;

&lt;h2 id=&#34;platform-selection:77ce787a7182a2f283d6b9ebd897e1e5&#34;&gt;Platform selection&lt;/h2&gt;

&lt;p&gt;Many platforms exist, see &lt;a href=&#34;http://deployment.apievangelist.com/guide/api-evangelist-api-deployment-industry-guide-august-2015.pdf&#34;&gt;API Evangelist - August 2015&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To limit the choice, I&amp;rsquo;ll select the platform based on some personal criteria :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Available in open source on &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mobile_backend_as_a_service&#34;&gt;BaaS&lt;/a&gt; platform or compatible with a BaaS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2013/11/introduction-to-full-stack-javascript/&#34;&gt;Fullstack Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stable release &lt;a href=&#34;https://github.com/blog/1547-release-your-software&#34;&gt;Github - Release&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;finalists:77ce787a7182a2f283d6b9ebd897e1e5&#34;&gt;Finalists&lt;/h2&gt;

&lt;p&gt;I retain the following platforms in my initial experimentation :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://apigee.com/about/developers&#34;&gt;apigee&lt;/a&gt; via &lt;a href=&#34;https://github.com/apigee-127/a127-documentation/wiki/Quick-start&#34;&gt;a127&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://loopback.io/&#34;&gt;LoopBack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sailsjs.org/&#34;&gt;sails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://restify.com/&#34;&gt;restify&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;my-personal-setup:77ce787a7182a2f283d6b9ebd897e1e5&#34;&gt;My personal setup&lt;/h2&gt;

&lt;p&gt;To build my first projet, I will use the Microsoft &lt;a href=&#34;https://code.visualstudio.com/Download&#34;&gt;code&lt;/a&gt; editor on an &lt;a href=&#34;http://myzen.asus.com/2015/10/29/an-update-to-the-asus-zenbook-ux305/&#34;&gt;Asus UX305C&lt;/a&gt; portable computer.  Occasionally, I use &lt;a href=&#34;https://c9.io&#34;&gt;c9&lt;/a&gt; order to have a fully available cloud development environment.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a start!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>